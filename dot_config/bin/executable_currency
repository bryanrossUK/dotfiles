#!/usr/bin/env bash

unset base
unset exchangeTo
unset configuredClient
currencyCodes=(AUD BAM BGN BMD BND BRL CAD CHF CNY CZK DJF DKK
               EUR GBP HKD HRK HUF IDR ISK ILS INR
               JPY KRW MXN MYR NOK NZD PAB PHP PLN
               RON RUB SEK SGD THB TRY USD ZAR)

## This function determines which http get tool the system has installed and returns an error if there isnt one
getConfiguredClient()
{
  if command -v curl &>/dev/null; then
    configuredClient="curl"
  elif command -v wget &>/dev/null; then
    configuredClient="wget"
  elif command -v http &>/dev/null; then
    configuredClient="httpie"
  elif command -v fetch &>/dev/null; then
    configuredClient="fetch"
  else
    echo "Error: This tool requires either curl, wget, httpie or fetch to be installed." >&2
    return 1
  fi
}

## Allows to call the users configured client without if statements everywhere
httpGet()
{
  case "$configuredClient" in
    curl)  curl -A curl -s "$@" ;;
    wget)  wget -qO- "$@" ;;
    httpie) http -b GET "$@" ;;
    fetch) fetch -q "$@" ;;
  esac
}

checkValidCurrency()
{
  if [[ "${currencyCodes[*]}" == *"$(echo "${@}" | tr -d '[:space:]')"* ]]; then
    echo "0"
  else
    echo "1"
  fi
}

## Grabs the base currency from the user and validates it with all the possible currency
## types available on the API and guides user through input (doesnt take in arguments)
getBase()
{
  echo -n "What is the base currency: "
  read -r base
  base=$(echo "$base" | tr /a-z/ /A-Z/)
  if [[ $(checkValidCurrency "$base") == "1" ]]; then
    unset base
    echo "Invalid base currency"
    getBase
  fi
}

## Checks base currency from the user and validates it with all the possible currency
## types available on the API (requires argument)
checkBase()
{
  base=$1
  base=$(echo "$base" | tr /a-z/ /A-Z/)
  if [[ $(checkValidCurrency "$base") == "1" ]]; then
    unset base
    echo "Invalid base currency"
    exit 1
  fi
}

## Grabs the exchange to currency from the user and validates it with all the possible currency
## types available on the API and guides user through input (doesnt take in arguments)
getExchangeTo()
{
  echo -n "What currency to exchange to: "
  read -r exchangeTo
  exchangeTo=$(echo "$exchangeTo" | tr /a-z/ /A-Z/)
  if [[ $(checkValidCurrency "$exchangeTo") == "1" ]]; then
    echo "Invalid exchange currency"
    unset exchangeTo
    getExchangeTo
  fi
}

## Grabs the exchange to currency from the user and validates it with all the possible currency
## types available on the API (requires arguments)
checkExchangeTo()
{
  exchangeTo=$1
  exchangeTo=$(echo "$exchangeTo" | tr /a-z/ /A-Z/)
  if [[ $(checkValidCurrency "$exchangeTo") == "1" ]]; then
    echo "Invalid exchange currency"
    unset exchangeTo
    exit 1
  fi
}

## Get the amount that will be exchanged and validate that the user has entered a number (decimals are allowed)
## doesnt take in argument, it guides user through input
getAmount()
{
  echo -n "What is the amount being exchanged: "
  read -r amount
  if [[ ! "$amount" =~ ^[0-9]+(\.[0-9]+)?$ ]]
  then
    echo "The amount has to be a number"
    unset amount
    getAmount
  fi
}

## Get the amount that will be exchanged
## validate that the user has entered a number (decimals are allowed and requires argument)
checkAmount()
{
  amount=$1
  if [[ ! "$amount" =~ ^[0-9]+(\.[0-9]+)?$ ]]
  then
    echo "The amount has to be a number"
    unset amount
    exit 1
  fi
}

checkInternet()
{
  httpGet github.com > /dev/null 2>&1 || { echo "Error: no active internet connection" >&2; return 1; } # query github with a get request
}

## Grabs the exchange rate and does the math for converting the currency
convertCurrency()
{
  trueBase=$base
  trueTarget=$exchangeTo
  coef1="1"
  coef2="1"

  if [[ "$trueBase" == "$exchangeTo" || "$base" == "$trueTarget" ]]; then
    exchangeRate="1"
  else
    exchangeRate=$(httpGet "https://api.exchangerate-api.com/v4/latest/$trueBase" | grep -Eo "$trueTarget\":[0-9.]*" | grep -Eo "[0-9.]*") > /dev/null
  fi
  if ! command -v bc &>/dev/null; then
    echo "You need to have bc installed to do maths"
    exit 1
  else
    exchangeRate=$( echo "scale=8; $exchangeRate / $coef1" | bc )
    exchangeRate=$( echo "$exchangeRate * $coef2" | bc )
    exchangeAmount=$( echo "$exchangeRate * $amount" | bc )
  fi

  cat <<EOF
=========================
| $base to $exchangeTo
| Rate: $exchangeRate
| $base: $amount
| $exchangeTo: $exchangeAmount
=========================
EOF
}

usage()
{
  cat <<EOF
Currency

Description: A realtime currency converter.
   With no flags it will guide you through the currency exchange

Usage: currency
Usage: currency [amount] [source] to [target]
  -h  Show the help

Supported Currencies:
 ______________________________
| AUD | BGN | BRL | CAD | ZAR |
| CHF | CNY | CZK | DKK |     |
| EUR | GBP | HKD | HRK |     |
| HUF | ISK | IDR | ILS |     |
| INR | JPY | KRW | MXN |     |
| MYR | NOK | NZD | PHP |     |
| PLN | RON | RUB | SEK |     |
| SGD | THB | TRY | USD |     |
 ______________________________

Examples:
  currency 100 EUR to USD
  currency
EOF
}

getConfiguredClient || exit 1


while getopts "h" opt; do
  case "$opt" in
    \?) echo "Invalid option: -$OPTARG" >&2
        exit 1
        ;;
    h)  usage
        exit 0
        ;;
    :)  echo "Option -$OPTARG requires an argument." >&2
        exit 1
        ;;
  esac
done

# currency 123 USD to GBP

if [[ $# == 0 ]]; then
  echo "no args, so im going to ask you"
  checkInternet || exit 1 # check if we have a valid internet connection if this isnt true the rest of the script will not work so stop here
  getBase # get base currency
  getExchangeTo # get exchange to currency
  getAmount # get the amount to be converted
  convertCurrency # grab the exhange rate and perform the conversion
  exit 0
elif [[ $# == "4" ]]; then
  echo "you want me to convert $1 from $2 to $4, correct?"
  checkInternet || exit 1 # check if we have a valid internet connection if this isnt true the rest of the script will not work so stop here
  checkBase "$2"
  checkExchangeTo "$4"
  checkAmount "$1"
  convertCurrency
  exit 0
else
  usage
fi
